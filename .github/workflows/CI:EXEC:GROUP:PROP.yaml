name: "CI:EXEC:GROUP:PROP.yaml"

on:
    push:
        paths:
          - 'parameter_proposals/proposals/*.json'
        branches:
          - 'main'
jobs:
  add_group_proposal:
    name: "CI:EXEC:GROUP:PROP.yaml"
    runs-on: ["ubuntu-latest"]
    env:
      BINARY_URL: "https://github.com/zeta-chain/node/releases/latest/download/zetacored-ubuntu-22-arm64"
      CHAIN_ID: "athens_7001-1" # TODO 
      CONSTANT_PARAMS: "--broadcast-mode=block --gas=auto --gas-adjustment=2 --gas-prices=1.0azeta --keyring-backend test -y"
      TENDERMINT_NODE: "https://rpc-archive.athens.zetachain.com:26657"
      VOTING_ACCOUNT: "zeta1utsn7w4dzluh026ylwkntmtc4jrpn2393nsggp"
      VOTE_YES_OR_NO: "VOTE_OPTION_YES"
      METADATA: "ipfs://QmYMEcLNY7yAfur8KtH2rcJTJutPNuGEJLaPrWEM6iAcpP"
      EMERGENCY_GROUP_POLICY_ADDRESS: "zeta1dlszg2sst9r69my4f84l3mj66zxcf3umcgujys30t84srg95dgvs5wguxq" ## TODO Add this 

    steps:
      - uses: actions/checkout@v3

      - name: "DOWNLOAD:BINARY:SET:PATH"
        shell: bash
        run: |
          wget -q ${BINARY_URL}
          mv zetacored-ubuntu-22-arm64 zetacored
          echo "PATH=$(pwd):$PATH" >> ${GITHUB_ENV}
          chmod 777 zetacored

      - name: "LOAD:MNEMONIC"
        shell: bash
        run: |
          echo "${{ secrets.GOV_MNEMONIC }}" | zetacored keys add governance_mnemonic_account --keyring-backend test --recover --hd-path="m/44'/118'/0'/0/0"
          export VOTING_ACCOUNT=$(zetacored keys show governance_mnemonic_account -a --keyring-backend test)
          echo "VOTING_ACCOUNT=$VOTING_ACCOUNT" >> ${GITHUB_ENV}


      - name: Execute zetacored for new files
        run: |
            # Get list of added files in the latest commit
            NEW_PROPOSALS=$(git diff-tree --no-commit-id --name-only -r HEAD | grep 'groups/proposals/.*\.json')
            
            # Loop through each file and execute the command
            for PROPOSAL in $NEW_PROPOSALS; do
                echo "SUBMITTING PROPOSAL: $PROPOSAL"
                echo "FROM CI ADDRESS: ${{ env.VOTING_ACCOUNT }}"

                GROUP_PROPOSAL_ADDRESS=$(jq -r '.group_policy_address' $PROPOSAL)
                echo "To GROUP_PROPOSAL_ADDRESS: $GROUP_PROPOSAL_ADDRESS"

                # submit proposal and get tx hash 
                TX_HASH=$(zetacored tx group submit-proposal "$PROPOSAL" --node=${{ env.TENDERMINT_NODE }} \
                  --from ${{ secrets.SIGNER }} ${{ env.CONSTANT_PARAMS }} \
                  --chain-id ${{ env.CHAIN_ID }} \
                  -o json | jq .txhash -r)
                echo "TX_HASH: $TX_HASH"
                sleep 12

                # echo "Get group proposal ID"
                GROUP_PROPOSAL_ID=$(zetacored query tx $TX_HASH --output json --node=${{ env.TENDERMINT_NODE }} --chain-id ${{ env.CHAIN_ID }} | jq '.events' | jq -r '.[] | select(.type == "cosmos.group.v1.EventSubmitProposal") | .attributes[0].value' | base64 --decode | jq -r '.')
                echo "GROUP_PROPOSAL_ID: $GROUP_PROPOSAL_ID"
                
                echo "VOTE YES ON PROPOSAL: $GROUP_PROPOSAL_ID"
                zetacored tx group vote $GROUP_PROPOSAL_ID ${{ env.VOTING_ACCOUNT }} ${{ env.VOTE_YES_OR_NO }} ${{ env.METADATA }} \
                  --from governance_mnemonic_account \
                  ${{ env.CONSTANT_PARAMS }} \
                  --chain-id ${{ env.CHAIN_ID }} \
                  --node=${{ env.TENDERMINT_NODE }} \
                  --exec 1

                  sleep 12

                  # # if [$GROUP_PROPOSAL_ADDRESS == ${{ env.EMERGENCY_GROUP_POLICY_ADDRESS }}]
                  # echo "EXECUTE GROUP PROPOSAL: $GROUP_PROPOSAL_ID"
                  # zetacored tx group exec $GROUP_PROPOSAL_ID \
                  # --from governance_mnemonic_account \
                  #   ${{ env.CONSTANT_PARAMS }} \
                  #   --chain-id ${{ env.CHAIN_ID }} \
                  #   --node=${{ env.TENDERMINT_NODE }}
            done

  